Aws info 

Iam policies 

group = all iam users get the policy
consists
    - version : "2012-10-17"
    - id : "identifer of the policy"
    - statement:[
        {
            "Sid": identifer of the statement
            "Effect": "Allow" or "Deny"
            "Principal": "acc/ role / user to which the policy is applied to"
            "Action": API CALLS [s3:GetObject, s3:PutObject, ]"
            "Resource": "arn:aws:s3:::bucketname/*" or "arn:aws:ec2:*:*:instance"
        }
    ]

users > user1 >  add permissions > attach existing policy > search and add policy  (IAM read only access) 
* If u add user1 in devs group , so user will contain both individual as well as Group permissions and policies


Access Aws 
- by management console 
- aws cli by access keys 
- sdk python boto3 


iam user to create security credentials not by root user (lock it and throw it away)


CLI 
- CLI blank if permissions to user not provided 
    -- aws configure [ give id and pass , nearest region    ]
    -- aws iam list-users                  # list all users
    -- aws iam create-user                 # create user

IAM roles for aws services 
- can be used on iam users to access iam services as well
- used by aws services to access aws services ( one iam role + ec2 server == 1 entity )
-  Use Iam roles for EC2 instances > attach the role and 
    when u access ec2 by ssh u can use the resources without aws configure  command (used by iam user to authenticate)
    - here we directly provide iam role which consists of iam policy which is attached to ec2 instance !



Security Tools
IAM Security tools 
    - Credentials Report > get all info about iam users passwords and their info 
    - Click User > Access Advisor > shows the list of resources used by them and at what time
      which is  binded by the Polcy permission
    - One Iam user is one physical user , make groups for multiple users , enable mFa + password policy , 
    - Create and use ROLES for giving permissions to aws services ( EC2 or S3 use IAM roles )
    - Never share IAM users and ACCESS keys 
    
IAM roles define the set of permissions for making AWS service request whereas 
IAM policies define the permissions that you will require.... 
IAM roles are like users and policies are like permissions




EC2 -  ELASTIC COMPUTE CLOUD
    t2micro - 1 vpcu (virtual cpu ) with 1 GIb memory , ebs storage only  with low to moderate network performance !

    launching web server on ec2 
    - choose AMI - amazon machine image   (free tier )
    - choose instance   type, configurations, sg , user data (pre built scirpt for automation of daily tasks )
    Sg - allow http port 80 = means from anywhere it allows clients to access the website on port 80
    - create key pair and choose RSA and login 
    - start stop ec2 = change in its public ipv4
    - [ EC2 when launched = Os Boots and the ec2 user data is run
      when you restart just the OS boots up , so if application is slow it will take time to start up ]
      EC2 HIBERNATE - when used in memory RAM is preserved and instance boot is much faster , here OS IS NOT STOPPED / RESTARTED ,
      under the hood - ram state is writeen to encrypted EBS volume  (must be encrypted )
      Use case - service thats takes time to initialize , save RAM state , no boot up time for application 
       (only available for on demand and reserved instances , cannot be hibernated more than 60 days )
       when u connec to ec2 , connect to it and use uptime command to check for how much time the instance was up for ! 

    
    EC2 instance Types 
        m5.2xlarge 
        m : instance class
        5 : generation class 
        2xlarge : size within the instance class 
        [ more the size more the memory , more the cpu load on ur ec2 ]
    
    . General purpose  = Compute optimized performance  
            > for batch processing workloads, high performance web servers , high performance computing HPC , ML , DEDICATED game servers 
    . Memory optimized = Process large data sets in memory
            > High performance DBs , cache stores , in memory dbs , real time processing of big unstructured data
    . Storage optimized = Accessing lot of data sets of Local storage 
            > High frequency OLTP systems , relational and no sql dbs, cache , data warehouse 



Placement Groups
    - Placement group is a logical grouping of EC2 instances based on placement group strategies 
    - 3 startegies available - 
      Cluster = in single az cluster instances in low latency group (High performance and high risk with GOOD COMMUNICATION BETWEEN THEM , 10 Gb speed network ) > if rack fails ,all instances fails at same time (For Big Data Job),
      Spread = max 7 instances per group per AZ , spreads across underlying hardware ( Critical applications,minimize failure risk, MAXIMUM AVAILABILITY WHEN AZ FAIL  ) > if rack 1 fails , other one still stable ( For Maximize Availability )
      Partition = spreads instances across different partitons within AZ ,max 7 Partitions per az in same region , scales 100s EC2's , The instances in partition does not share same racks with other partition instances (For Big Data app , HDFS)



Elastic Network Interfaces ( ENI )
    - its gives ec2 access to the network , they are virtual network card(logical component ) in VPC
    - have 1 primary IPv4 or more secondary Ipv4 (public ipv4 , 1elastic ipv4 , mac address , one or more SG ), 
    - can be independently attach to ec2s, bound to PARTICULAR AZ, CANT BE ATTACHED TO ANOTHER AZ's EC2 
    (   Use case - 2 ec2s running an application and when you can  access that ec2 with the private ip - thanks to ENI (secondary virtual network card ) 
    we could easily do it without failover within 2 instances )


EC2 Advance concepts ( Nitro , vcpu , capacity reservations )
    nitro = better performance , ipv6 , enhance networking , 
            high speed EBS upto 64,000 IOPS

    [   IOPS = input/output operations per second 
        Performance for EBS is primarily measured in input/output operations per second (IOPS).
        In the EBS case, IOPS refer to operations on blocks that are up to 16 KB in size.1  Standard volumes deliver 100 IOPS on average.
        This is roughly to number of IOPS that a single desktop-class 7200 rpm SATA hard drive can deliver. 
        In comparison, a similar desktop-class SSD drive can deliver anywhere between 5,000 and 100,000 IOPS. 
        Server-class SSD drives can go much higher.
    ]

    OPTIMIZE CPU OPTIONS 
         - EC2 comes with combination of RAM and MEMORY 
         - in some case , u would want to change vcpu options , so if any license charges u on the cores 
           you can reomove these cores and utltize effeciently  > so that could be possible by vcpu options in AWS 
         - Can be done on aws launch only 
        
        vCPU - when launching instances , we are launching vpcus only 
            - multiple threads can run on 1 CPU (  Multithreading ), each thread is like a vcpu 

    CAPACITY RESERVATIONS 
        - You wish to reserve instances in particular AZ without 1 yr - 3 yr commitment 
        - it ensures u have enough ec2 capacity when needed for a specific time timeframe 

    
EC2 EBS 
    - EBS volume is a network drive that you attach to a particular instance and the data will still persist after its termination and 
      it can be only mounted to one instance at a time and it is bound to a specific availability zone only just like EC2 
    - can attach multiple ebs volumes on single ec2 
    - in order to move it across the availability zone you need to take the snapshot of it it has a high provision capacity 
    - basically it is  backup of ebs volumes only and there is no necessary to detach the volume to do the snapshot 
      but it is a good practice so you create the snapshots to copy data from across the region

    - Volume  in 6 types 
     gp2/gp3 and io1 io2 can be used as boot volumes   
     General purpose SSD - cost effective , low latency , for  system boot bolumes ,gp3 increase upto 16000 IOPS , small gp2 upto 3000 IOPS 
    
    - Provisioned IOPS SSD 
    ( for critical applications that sustain IOPS more than 16000 ), good for db workloads

    - HDD . cannot be  boot volumes , with through put  optimized HDD , max IOPS 500 
          . COLD HDD - for data that is infrequently accessed  ( IOPS 250 )
    
    - EBS MULTI ATTACH 
      attach ebs volume to multiple ec2 instances in same ax , each az has full read and write  permisison to volume 
      ( for cuncurrent write operations  and HIGH availability )
    
    - EBS ENCRYPTION 
      WHEN U ENCRYPT 
        data at rest , on fly , snapshot , volumes created from it are envrypted 
      . Leverage keys from KMS AES 256 
      . By default, the Root volume type will be deleted as its "Delete On Termination" attribute checked by default. Any other EBS volume types will not be deleted as its "Delete On Termination" attribute disabled by default.
    

ELASTIC FILE SYSTEM  EFS 
    - here it can be mounted to multiple ec2s in multi az ( not like ebs which is locked in single az  and here data cant be shared )
    - 3 times cost of gp2 
    - all ec2 access the same files 
    ( web serving , data sharing , multi az )
    - uses sg to control access to EFS 
    - COMPATIBLE ONLY WITH LINUX AMI   - not windows 
    - it automatically scales with pay per use model 
    - FOr latency sensitive - GENERAL PURPOSE (webserver cms ) , FOr Big data Use MAX I/O (higher latency  ,through put )
    - Through put mode - bursting 1 TB = 50 mib , set your throughput regrdless of storage size 
    - STORGE Tiers - move files after N days , for standard and infrequent access (cost to retrieve files and to store files  if files not accessed lately )

EBS vs EFS 
    can be attached to single ec2 , locked in single AZ , IO increases if disk size increases , 
    to migrate ebs volume across az > take snapshot > here root vol gets terminated with ec2 by default 
whereas 
    efs mounts 100s of instances across AZ , only for linux , more expensive , use EFS-IA for cost savings 

Instance store helps to maximum IO , EC2 Instance Store provides the best disk I/O performance.



AMI
    - is a customisation of ec2 instance and if you create your own it gives your faster boot time and they are  built for a specific region only 
      But by default you use the public AMI but you can build your own as well 
    - we can build the AMI from the EBS snapshots that we  created and we can launch EC2 from it 
    AMIs are built for a specific AWS Region, they're unique for each AWS Region. You can't launch an EC2 instance using an AMI in another AWS Region, but you can copy the AMI to the target AWS Region and then use it to create your EC2 instances.

EC2 > EBS SNAPSHOT > AMI > EC2 ( new AZ  )



EC2 Instance Storage
    - if u need high performance hardware disk , better i/o , for cache temporary data 
    
    - You can run a database on an EC2 instance that uses an Instance Store, but you'll have a problem that the data will be lost if the EC2 instance is stopped (it can be restarted without problems). 
      One solution is that you can set up a replication mechanism on another EC2 instance with an Instance Store to have a standby copy. 
      Another solution is to set up backup mechanisms for your data. It's all up to you how you want to set up your architecture to validate your requirements. 
      In this use case, it's around IOPS, so we have to choose an EC2 Instance Store.






Security Groups
    - Firewalls outside of your ec2  (traffic in and out are dependent on them )
    - By default all inbound traffic is blocked  and all outside traffic is authorized
    - what is allowed to go in , is allowed to go out, based on rules by IP addresses 
    - source 0.0.0.0/0 means everything is allowed
    - single instance can have multiple security groups , locked in region /vpc > so new region new security group
    - If application not accessibe , then try to connect to configure your ports of the security group 
    - ec2_1 > sg_1 > ec2_2 , sg_2 >>> main_sg <<< EC2 >>>
    - 22 = ssh (secure shell) , http & https (80, 443) access unsecured and secured websites , 21 (FTP file transfer ),3389 (rdp windows control machine )
    

ssh ,puttty , ec2 instance connect  to connect to  ec2 
    - download putty > file > load private key and select the key (save it ) > enter putty configurations > ec2-user@ipv4 address under hostname > save it > under ssh > auth > browse and laod ssh key 
    - ssh  -i path_to_pem_file.pem ec2-user@ipv4 address      (if issue use chomd , or check the properties of key - the owner should be you and remove other users and apply )
   [  Any timeout (not just for SSH) is related to security groups or a firewall. Ensure your security group looks like this and correctly assigned to your EC2 instance. rules > ssh 0.0.0.0/0  ::/0  ]

Pricing options are available
    - On demand = linux per sec , windows per min , other per hour , no upfront , not long term
    ( recommended for short term and un interruption workloads ), here u dont know the workload
    - Reserved Instance  ( 75 % chepaer than on demand )
                         - reserved = for long workloads 
                         - convertible reserved  = long workloads with flexbile instances,can change ec2 type
                         - Scheduled  reserved   = every thursay btwn 3 to 6 pm 
                            ( for steady stage usage like databases )
    - Spot instances = short workloads . cheapest and can lose instance , for batch jobs, image processing, any distributed workloads , NOT FOR CRITICAL JOBS or DBS
        ( as long as max spot price is there  , we keep the instance , after that we get 2 min grace period , we can stop or terminate the instance )
        ( SPOT BLOCK - when u block spot instance for specific time period > 1-6 hours without interruption )
        ( spot request - one time request to book spot instance , persistent request to book spot instance for specific time period )
        - first cancel open active or disable spot request and then terminate the spot instance
        SPOT FLEETS = spot instances + on demand instances
           - define launch pools , lowest price 
           - automatically request spot instance with lowest price 

    - Dedicated Instance = instances running on hardware ,no control over instance placement  
        ( here billing is per instance )
    - Dedicated hosts = Book an entire physical server , contorl instance placement 
        ( physical server , renting entire server ,address compliance requirements and use your server bound software licenses )
        ( for 3 yr period ,  more expensive , server bound license can be used )
        (You would like to deploy a database technology on an EC2 instance and the vendor license bills you based on the physical cores and underlying network socket visibility.
         it will allow EC2 Purchasing Option allows you to get visibility into them?)

    EG 
        on demand - staying in resort whenever we like and we pay full price , reserved = planning ahead for booking rooms at good discount
        spot = hotels allows to bid for room , highest bidder gett the room , can get kicked out any time 
        dedicated hosts = book entire Building of the resort 


IPV4 VS IPV6
    - each octect in ipv4 ranges from 0-255
    - each computer in private network can talk to each other , but when you have internet gateway , it can go public 
    - Public ip means unique IP and can be identified on internet WWW
    - Private Ip means unique too across all private network,but 2 different private networks can have same IP address
    - machines with private ip conenct to www using NAT (network address translation)
    - when ec2 restarted , public ipv4 changes , private ipv4 remains same , can attach elastic ip one at a time 
    - u can only 5 elastic ip in ur account , can map failure to another ec2 
    - RECOMMENDED = use random IP with DNS register to it
    - By Default - EC2 comes with private ip for aws network and we cant ssh via it but for public ip  it is used for internet and can use the same for ssh 




SCALABILITY 
    - means application can handle greater loads of Scalability 
    - vertical ( increasing size of instance ,use case for database ) & horiztonal (increasing number of instances, ,use case for  web application )
    - High availability - running application in at least 2 data centers (2 AZs) , like to survive a data center loss 
    - Load Balancing    - servers that forward traffic to multiple servers 
    -                    ( Expose a single point DNS to your application , spread load , do regular health checkups , provide SSL termination HTTPS )
    - ELB is a managed load balancer which  aws gurantees it will work , will take care of upgrades , maintenance , High availability and Health checks of instances
    - Types of load balancers 
        > Classic Load balancer CLB (Legacy )
        > application load balancer  ( Http , Https , websocket )
        > Network Load Balancer ( TCP , TLS )
    - Can be private and Public , accessed by security group 
    - Overall it is recommenned to use newer generation 


CLASSIC Load Balancer 
    - Support TCP layer 4 and HTTPS Layer 7 of TCP/IP model 
    - health checks based on tcp andh http based , where hostname is fixed 
    ( we can allow all traffic from load balancers to EC2 via security group - allowing inbound rule -> will distribute traffic equally among all instances )

APPLICATION Load Balancer 
    - Layer 7 HTTP 
    - Load Balancing to multiple Http applications across machines (target groups )
    - support redirect from http to https 
    - Route traffic based on path in url ( eg /posts & /home )
    - Route traffic based on hostname in URL (eg one.ex.com  & other.ex.com )
    - Routing based on Query string headers ( /users?id=123 )
    (    Great fit for micro services and docker based container sized applications 
         beacuse they have port mapping feature to redirect to any dynamic port in ECS  )
    ( HERE TARGET GROUPS can be EC2 , ECS tasks , lambda functions , IP addresses 
        Thus it can route to multiple target groups and health checks can be done at target group level ) 
    - ALB cant see IP of the client directly , THE TRUE IP OF THE CLIENT IS INSERTED IN THE HEADER 
    X-Forwarded-For 
    [ when your load balancer talks to your EC2 instance,
    it's going to use the load balancer IP,
    which is a private IP into your EC2 instance.
    And so for the EC2 instance to know the client IP,
    it will have to look at these extra headers
    in your HTTP request, which are called X-Forwarded-Port and Proto.]

    - LOAD goes from USERS > TO ALB > TO TARGET GROUP > TO EC2

NETWORK  Load Balancer 

    - when you need ultra-high performance, TLS offloading at scale, centralized certificate deployment,
      support for UDP, 
    - static IP addresses for your applications. 
    - Operating at the connection level ( LAYER 4 ), 
    - Network Load Balancers are capable of handling millions of requests per second 
      securely while maintaining ultra-low latencies.
    - protocol TCP & UDP  (no http , no https , no websocket )
    (   If status of instances are unhealthy , make sure you check the security groups of the instances 
       so that it allows HTTP traffic from anywhere )


GATEWAY Load Balancer   ( GLB )
    - Layer 3 Network Layer 
    - Deploy , scale and manage a  fleet of 3 party network virtual appliances in AWS 
    - LOAD goes from Users > route table > GLB > target group > GLB > EC2 
    ( single entry exit for all traffic = Transparent Network Gateway )
    - Uses The GENEVE Protocl on port 6081 
  

Sticky Sessions ( Session Affinity )

    - We can set the cookie to be sticky , so that the same user will be served the same instance
    - works for ALB and CLB only 
    - Use case - so that user dosen't loose session data  but may imabalance the load to single ec2 
    - Cookies Names > Application based > 




