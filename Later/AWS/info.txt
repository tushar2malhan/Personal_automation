Aws info 

Iam policies 

group = all iam users get the policy
consists
    - version : "2012-10-17"
    - id : "identifer of the policy"
    - statement:[
        {
            "Sid": identifer of the statement
            "Effect": "Allow" or "Deny"
            "Principal": "acc/ role / user to which the policy is applied to"
            "Action": API CALLS [s3:GetObject, s3:PutObject, ]"
            "Resource": "arn:aws:s3:::bucketname/*" or "arn:aws:ec2:*:*:instance"
        }
    ]

users > user1 >  add permissions > attach existing policy > search and add policy  (IAM read only access) 
* If u add user1 in devs group , so user will contain both individual as well as Group permissions and policies


Access Aws 
- by management console 
- aws cli by access keys 
- sdk python boto3 


iam user to create security credentials not by root user (lock it and throw it away)


CLI 
- CLI blank if permissions to user not provided 
    -- aws configure [ give id and pass , nearest region    ]
    -- aws iam list-users                  # list all users
    -- aws iam create-user                 # create user

IAM roles for aws services 
- can be used on iam users to access iam services as well
- used by aws services to access aws services ( one iam role + ec2 server == 1 entity )
-  Use Iam roles for EC2 instances > attach the role and 
    when u access ec2 by ssh u can use the resources without aws configure  command (used by iam user to authenticate)
    - here we directly provide iam role which consists of iam policy which is attached to ec2 instance !



Security Tools
IAM Security tools 
    - Credentials Report > get all info about iam users passwords and their info 
    - Click User > Access Advisor > shows the list of resources used by them and at what time
      which is  binded by the Polcy permission
    - One Iam user is one physical user , make groups for multiple users , enable mFa + password policy , 
    - Create and use ROLES for giving permissions to aws services ( EC2 or S3 use IAM roles )
    - Never share IAM users and ACCESS keys 
    
IAM roles define the set of permissions for making AWS service request whereas 
IAM policies define the permissions that you will require.... 
IAM roles are like users and policies are like permissions




EC2 -  ELASTIC COMPUTE CLOUD
    t2micro - 1 vpcu (virtual cpu ) with 1 GIb memory , ebs storage only  with low to moderate network performance !

    launching web server on ec2 
    - choose AMI - amazon machine image   (free tier )
    - choose instance   type, configurations, sg , user data (pre built scirpt for automation of daily tasks )
    Sg - allow http port 80 = means from anywhere it allows clients to access the website on port 80
    - create key pair and choose RSA and login 
    - start stop ec2 = change in its public ipv4
    
    EC2 instance Types 
        m5.2xlarge 
        m : instance class
        5 : generation class 
        2xlarge : size within the instance class 
        [ more the size more the memory , more the cpu load on ur ec2 ]
    
    . General purpose  = Compute optimized performance  
            > for batch processing workloads, high performance web servers , high performance computing HPC , ML , DEDICATED game servers 
    . Memory optimized = Process large data sets in memory
            > High performance DBs , cache stores , in memory dbs , real time processing of big unstructured data
    . Storage optimized = Accessing lot of data sets of Local storage 
            > High frequency OLTP systems , relational and no sql dbs, cache , data warehouse 
    
Security Groups
    - Firewalls outside of your ec2  (traffic in and out are dependent on them )
    - By default all inbound traffic is blocked  and all outside traffic is authorized
    - what is allowed to go in , is allowed to go out, based on rules by IP addresses 
    - source 0.0.0.0/0 means everything is allowed
    - single instance can have multiple security groups , locked in region /vpc > so new region new security group
    - If application not accessibe , then try to connect to configure your ports of the security group 
    - ec2_1 > sg_1 > ec2_2 , sg_2 >>> main_sg <<< EC2 >>>
    - 22 = ssh (secure shell) , http & https (80, 443) access unsecured and secured websites , 21 (FTP file transfer ),3389 (rdp windows control machine )
    

ssh ,puttty , ec2 instance connect  to connect to  ec2 
    - download putty > file > load private key and select the key (save it ) > enter putty configurations > ec2-user@ipv4 address under hostname > save it > under ssh > auth > browse and laod ssh key 
    - ssh  -i path_to_pem_file.pem ec2-user@ipv4 address      (if issue use chomd , or check the properties of key - the owner should be you and remove other users and apply )
   [  Any timeout (not just for SSH) is related to security groups or a firewall. Ensure your security group looks like this and correctly assigned to your EC2 instance. rules > ssh 0.0.0.0/0  ::/0  ]

Pricing options are available
    - On demand = linux per sec , windows per min , other per hour , no upfront , not long term
    ( recommended for short term and un interruption workloads ), here u dont know the workload
    - Reserved Instance  ( 75 % chepaer than on demand )
                         - reserved = for long workloads 
                         - convertible reserved  = long workloads with flexbile instances,can change ec2 type
                         - Scheduled  reserved   = every thursay btwn 3 to 6 pm 
                            ( for steady stage usage like databases )
    - Spot instances = short workloads . cheapest and can lose instance , for batch jobs, image processing, any distributed workloads , NOT FOR CRITICAL JOBS or DBS
        ( as long as max spot price is there  , we keep the instance , after that we get 2 min grace period , we can stop or terminate the instance )
        ( SPOT BLOCK - when u block spot instance for specific time period > 1-6 hours without interruption )
        ( spot request - one time request to book spot instance , persistent request to book spot instance for specific time period )
        - first cancel open active or disable spot request and then terminate the spot instance
        SPOT FLEETS = spot instances + on demand instances
           - define launch pools , lowest price 
           - automatically request spot instance with lowest price 

    - Dedicated Instance = instances running on hardware ,no control over instance placement  
        ( here billing is per instance )
    - Dedicated hosts = Book an entire physical server , contorl instance placement 
        ( physical server , renting entire server ,address compliance requirements and use your server bound software licenses )
        ( for 3 yr period ,  more expensive , server bound license can be used )
        (You would like to deploy a database technology on an EC2 instance and the vendor license bills you based on the physical cores and underlying network socket visibility.
         it will allow EC2 Purchasing Option allows you to get visibility into them?)

    EG 
        on demand - staying in resort whenever we like and we pay full price , reserved = planning ahead for booking rooms at good discount
        spot = hotels allows to bid for room , highest bidder gett the room , can get kicked out any time 
        dedicated hosts = book entire Building of the resort 


IPV4 VS IPV6
    - each octect in ipv4 ranges from 0-255
    - each computer in private network can talk to each other , but when you have internet gateway , it can go public 
    - Public ip means unique IP and can be identified on internet WWW
    - Private Ip means unique too across all private network,but 2 different private networks can have same IP address
    - machines with private ip conenct to www using NAT (network address translation)
    - when ec2 restarted , public ipv4 changes , private ipv4 remains same , can attach elastic ip one at a time 
    - u can only 5 elastic ip in ur account , can map failure to another ec2 
    - RECOMMENDED = use random IP with DNS register to it
    - By Default - EC2 comes with private ip for aws network and we cant ssh via it but for public ip  it is used for internet and can use the same for ssh 


Placement Groups
    - Placement group is a logical grouping of EC2 instances that you can use to ensure that your EC2 instances are always on the same physical server.
    - 

Elastic Network Interfaces ( ENI )
    - it is a virtual private network (VPC) interface that allows you to connect to the internet from your EC2 instances.
    - 










