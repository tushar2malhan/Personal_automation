CREATE PODS IN KUBERNETES



kind:      Represent the type of k8s object created. 
|          It can be a Pod, DaemonSet, Deployments or Service.
version:   K8s api version used to create the resource, 
|          It can be v1, v1beta and v2. 
metadata:  Information about PODS  like 
|          name of the pod,labels namespace under 
|          which the pod will be running,labels and annotations.
spec:      Information about Containers . 
|          Here expected state of resource, 
|          Like container image, number of replicas, 
|          environment variables and volumes are defined 
status:    Consists of information about the running pod, 
|          status of each container. Status field is 
|          supplied and handled by Kubernetes 
|          Automatically by etcd in master node


< pod.yaml >

    apiVersion: v1
    kind: Pod
    metadata:
      name: spring-pod
      labels:
        app: api
    spec:
      containers:
      - image: chkrishna/springdemoapp:latest
        name: spring-demoapp
        ports:
        - containerPort: 8080
          protocol: TCP

    #   kubectl create <pod.yaml>


When we create an object in K8s, 
we need to provide the object spec (manifest =  yaml or json file )
which describes the object desired state. 
The status describes the actual state of the object.
it has only one container as mentioned in the spec
and we are referring a sample image springdemoapp
which is a spring boot java based application 
and the container is running on port 8080.


Labels are very important in K8s.
Labels are used to identify and match with other objects.

|   get all pods with same name                |
|   kubectl get pods --show-labels label_name  |  


Now that our pod is running successfully!
Q how do we access our application? 
    - hostPort 
    - port-forward 
    - service based approach.

Access Pod Using hostPort:
    - add hostPort parameter to the ports section.
    hostPort is the port on the host machine where the pod is running.
    It is useful when you want to access the pod from outside the cluster.

    ports:
    - containerPort: 8080
      hostPort: 9090
      protocol: TCP

    With this change our application is exposed to host network using hostIp

Access Pod Using port-forward: 
    (recommend using it for only local testing)
    - port-forward is a command that allows you to forward a port from a pod to the host.

    = kubectl port-forward spring-pod 10000:8080
    (try the same request with 10000 port using:curl -v http://127.0.0.1:10000/health)


